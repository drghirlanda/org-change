#+title: org-change: Track changes in org-mode
#+author: Stefano Ghirlanda
#+email: drghirlanda@gmail.com
#+options: toc:nil ':t
#+latex_header: \hypersetup{hidelinks}

* Introduction

org-change is an Emacs minor mode that (ab)uses the org-mode link
syntax for a simple "track changes" feature similar to some word
processors. The main use case is for authors to highlight the changes
between two versions of a document, such as before and after review by
a third party. For this, org-change provides:
- A ~change~ link type to mark additions, deletions, and replacements.
- Functions and key bindings to manipulate ~change~ links.
- Export filters for ~change~ links (currently Latex and HTML).

* Installation

Install from MELPA, or manually from here.

* ~change~ link syntax

To indicate that "old text" is being replaced by "new text,"
org-change defines the following ~change~ link syntax:
#+begin_src org
  [[change:old text][new text]]
#+end_src
The idea is that you end up seeing only "new text," because org-mode
(typically) hides the part of the link within the first pair of
brackets. To indicate an addition, org-change just omits ~old text~:
#+begin_src org
  [[change:][new text]]
#+end_src
To indicate a deletion, org-change uses ~((DELETED))~ as ~new text~:
#+begin_src org
  [[change:old text][((DELETED))]]
#+end_src
You can embed comments in change links by surrounding them with double
stars at the end of ~new text~:
#+begin_src org
  [[change:old text][new text**A comment**]]
#+end_src
All this by itself is not very useful, but read on.

* ~change~ link manipulation

org-change provides key sequences to easily manipulate ~change~
links. All key sequences start with ~C-`~ (control + left quote). Not
the prettiest, but few control prefixes are free. It's the curse of
keymensionality. To change it, see section [[Customizing and
extending]].

The key sequences are:
- ~C-` a~ :: for additions.
- ~C-` d~ :: for deletions.
- ~C-` r~ :: for replacements.
All these act on the active region. For example, in the case of
replacement, the region is marked for deletion, and you are prompted
for new text. You can also use ~C-` a~ without marking a region, in
which case you are prompted for new text.

Key sequences are also provided to accept or reject the change under
the cursor:
- ~C-` k~ :: to accept.
- ~C-` x~ :: to reject.
"Accept" means to delete the change link (including any comments) and
insert the new text (or nothing, if the change is a
deletion). "Reject" means to delete the change link and insert the old
text (or nothing, if the change is an addition).

The following functionality is provided by org-mode, and is useful for
~change~ links:
- ~C-c C-l~ :: lets you edit the link in the minibuffer. Because this
  is an org-mode function for all links, it will display the "old
  text" as =Link: change:old text= and the "new text" as =Description: new text=.
- ~M-x org-toggle-link-display~ :: toggles between showing and hiding
  the hidden part of every link in the buffer. This can be useful to
  work on longer edits.

* Exporting
** LaTeX export

When exporting to LaTeX, org-change uses the ~changes~ package, which
it includes automatically in the exported document. org-change will
then use the commands ~\added~, ~\deleted~, and ~\replaced~ provided
by this package.

org-change supports some additional features of the ~changes~
package. It supports comments, so that
#+begin_src org
  [[change:old text][new text**A comment**]]
#+end_src
is exported to
#+begin_src org
  \replaced[comment=A comment]{new text}{old text}
#+end_src
You can also sneak in other fields supported by ~changes~ at the end
of the comment. For example, you can indicate the author of the
comment:
#+begin_src org
  [[change:old text][new text**My comment,author=SG**]]
#+end_src
which is exported to:
#+begin_src org
  \replaced[comment=My comment,author=SG]{new text}{old text}
#+end_src
Lastly, you can set options for the ~changes~ package by setting the
variable ~org-change-latex-options~. For example, you can place this
code somewhere in your document and evaluate it:
#+begin_src org
  ,#+begin_src elisp
    (setq org-change-latex-options "[markup=underline]")
  ,#+end_src
#+end_src
Note that you need to include the brackets. The ~changes~ package also
has configurations that are not set through package options, which you
can set through ~#+latex_header:~ lines.

The ~changes~ package causes errors with some LaTeX commands. This can
happen, for example, when ~\cite~ and similar commands appear in a
change. To fix these problems, you can try to add ~\protect~ or
~\noexpand~ before the offending command, or to wrap the command in an
~\mbox~.

** HTML export

When exporting to HTML, org-change produces ~<span>~ elements with
classes ~org-change-added~, ~org-change-deleted~, and
~org-change-comment~. A replace link has both an added and a deleted
span, while add and delete links only have one span. The comment span
is embedded in the add span when present, otherwise in the delete
span. So this:
#+begin_src org
  [[change:old text][new-text**comment**]]
#+end_src
becomes this:
#+begin_example
<span class="org-change-added">
  new text
  <span class="org-change-comment">
    comment
  </span>
</span>
<span class="org-change-deleted">
  old text
</span>
#+end_example
You can then use CSS to display these classes as desired.

# used to generate the example above:
# #+begin_src elisp
#   (org-change--export-html "old text" "new text" "comment")
# #+end_src

** Producing a clean document

When exporting, org-change looks first at the variable
~org-change-final~. This is initially ~nil~, meaning that the export
proceeds according to the selected backend as detailed above. If
~org-change-final~ is not ~nil~, then only the new text is exported,
resulting in a "clean" document without change markup. To achieve
this, you can evaluate this code block before exporting:
#+begin_src org
  ,#+begin_src elisp :exports none :results silent
    (setq org-change-final t)
  ,#+end_src
#+end_src
This code can be anywhere in your file, even a ~:noexport:~ section.

* Customizing and extending
** Customization

The key sequences and the face used to display change links can be
changed through the customize interface:
#+begin_src org
  M-x customize-group RET org-change
#+end_src

** Adding exporters

To add an export format, add something like this to your org file:
#+begin_src org
  ,#+begin_src elisp
    (org-change-add-export-backend 'backend 'backend-function)
  ,#+end_src
#+end_src
where ~backend~ is a backend known to org-mode and ~backend-function~
is a function that produces the desired string from three string
arguments: ~old-text~, ~new-text~, and ~comment~. The function can
figure out whether the change is an addition, deletion, or replacement
by looking at these variables: for additions, ~old-text~ is empty; for
deletions, ~new-text~ is ~((DELETED))~; other cases are replacements.

* Bugs and limitations

- The content of the change link can contain org-mode notation like
  *bold* and /emphasis/, as well as Latex code. However, some other
  features do not currently work. Notably, org-ref links must be
  translated manually to Latex. So this will *not* work:
  #+begin_src org
    [[change:][Let's cite something cite:&something1972]]
  #+end_src
  But this will:
  #+begin_src org
    [[change:][Let's cite something \cite{something1972}]]
  #+end_src
- Link hiding is sometimes inaccurate in org-mode. You may see stray
  brackets especially with link that span multiple lines. Often ~M-q~
  takes care of this, or you can enable ~visual-line-mode~ and keep
  paragraphs as single unbroken lines.
  
* Planned features

- More export filters.
- Simple HTML CSS for change markup.  
- A function ~org-change-accept-all~ to process all change links in
  the buffer.
- A function to manipulate comments.
  
* Notes

To get started on org-change, I described some features to ChatGPT
(April 2023 version) and asked for the corresponding code. It was
wrong in many ways, like using non-existing functions with plausible
names (~org-escape-latex~) and other non-existing features. It also
insisted that some things would work even when told that they did
not. It did have a good grasp of many things, like defining a minor
mode and customize variables, and it was always syntactically correct.
