#+title: org-change: Track changes in org-mode
#+author: Stefano Ghirlanda
#+email: drghirlanda@gmail.com
#+options: toc:nil ':t
#+latex_header: \hypersetup{hidelinks}

* Introduction

org-change is a minor mode that (ab)uses the org-mode link syntax for
a simple "track changes" feature. It defines a ~change~ link type to
mark additions, deletions, and replacements. For example:
#+begin_src org
  [[change:old text][new text]]
#+end_src
Because org-mode (typically) hides the part of the link within the
first pair of brackets, you only see ~new text~. To indicate an
addition, just omit ~old text~:
#+begin_src org
  [[change:][new text]]
#+end_src
To indicate a deletion, use ~((DELETED))~ as ~new text~:
#+begin_src org
  [[change:old text][((DELETED))]]
#+end_src
Two features provided by org-change make this syntax useful:
1. Key bindings to manipulate ~change~ links.
2. Export filters to render ~change~ links appropriately.
Right now, org-change supports exporting to Latex and HTML.

* Installation

Manually from here for now, from MELPA later. 

* Key bindings

org-change key bindings start with ~C-`~ (control + left quote). Not
the prettiest, but few control prefixes are free. It's the curse of
keymensionality. It can be [[Customization][customized]].

You can Add, delete, and replace text like this:
- ~C-` a~ :: for additions (invokes ~org-change-add~).
- ~C-` d~ :: for deletions (~org-change-delete~).
- ~C-` r~ :: for replacements (~org-change-replace~).
These actions operate on the active region, marking it as an addition,
deletion, or replacement. In the case of replacement, you will be
prompted for the new text. You can also use ~C-` a~ without marking a
region. In this case, you will prompted for the new text.

Key bindings are also provided to accept and reject changes:
- ~C-` k~ :: to accept the change at point (~org-change-accept~).
- ~C-` x~ :: to reject the change at point (~org-change-reject~).  
To accept means to delete the change link (including any comments) and
insert the new text (or nothing, if the change is a deletion). To
reject means to delete the change link and insert the old text (or
nothing, if the change is an addition).

The following functionality is provided by org-mode, and is useful for
~change~ links:
- ~C-c C-l~ :: lets you edit the link in the minibuffer. Because this
  is an org-mode function for all links, it will display the "old
  text" as =Link: change:old text= and the "new text" as =Description: new text=.
- ~M-x org-toggle-link-display~ :: toggles between showing and hiding
  the hidden part of every link in the buffer. This can be useful to
  work on longer edits.

* Exporting
** LaTeX export

When exporting to LaTeX, org-change uses the ~changes~ package, which
must be included with a ~#+latex_header~ line:
#+begin_src org
  #+latex_header: \usepackage{changes}
#+end_src
org-change will then use the commands ~\added~, ~\deleted~, and
~\replaced~ provided by this package.

The content of the change link can contain org-mode notation like
*bold* and /emphasis/, as well as Latex commands. However, some other
features do not currently work. Notably org-ref links must be
translated manually to Latex. So this will *not* work:
#+begin_src org
  [[change:][Let's cite something cite:something]]
#+end_src
But this will:
#+begin_src org
  [[change:][Let's cite something \cite{something}]]
#+end_src

org-change supports some additional features of the ~changes~
package. You can add a comment to any change like this:
#+begin_src org
  [[change:old text][new text**A comment**]]
#+end_src
which is exported to
#+begin_src org
  \replaced[comment=A comment]{new text}{old text}
#+end_src
The comment must be at the end of ~new text~. You can add other fields
supported by ~changes~ by adding them at the end of the comment. For
example, you can indicate the author of the comment:
#+begin_src org
  [[change:old text][new text**My comment,author=SG**]]
#+end_src
which is exported to:
#+begin_src org
  \replaced[comment=My comment,author=SG]{new text}{old text}
#+end_src

** HTML export

When exporting to HTML, org-change produces ~<span>~ elements with
classes ~org-change-added~, ~org-change-deleted~, and
~org-change-comment~. A replace link has both an added and a deleted
span, while add and delete links only have one span. The comment span
is embedded in the add span when present, otherwise in the delete
span:
#+begin_src org
  [[change:old text][new-text**comment**]]
#+end_src
#+begin_example
<span class="org-change-added">new text<span class="org-change-comment">comment</span></span><span class="org-change-deleted">old text</span>
#+end_example
You can then use CSS to display these classes as desired.

The example above is generated with:
#+name: html-example
#+begin_src elisp
  (org-change--export-html "old text" "new text" "comment")
#+end_src
which happens automatically when exporting.

* Customizing and extending
** Customization

The key bindings and the face used to display change links can be
changed through the customize interface:
#+begin_src org
  M-x customize-group RET org-change
#+end_src

** Adding exporters

To add an export format, add something like this to your org file:
#+begin_src org
  ,#+begin_src elisp
    (org-change-add-export-backend 'backend 'backend-function)
  ,#+end_src
#+end_src
where ~backend~ is a backend known to org-mode and ~backend-function~
is a function that produces the desired string from three string
arguments: ~old-text~, ~new-text~, and ~comment~.

* Bugs and limitations

- org-ref links inside ~change~ links are not interpreted.
- Link hiding is sometimes inaccurate in org-mode. You may see stray
  brackets especially with link that span multiple lines. Often ~M-q~
  takes care of this.

* Planned features

- More export filters?
- A function ~org-change-accept-all~ to process all change links in the
  buffer?
- Make it possible to select final or draft in Latex export?
  
* Notes

To get started on org-change, I described some features to ChatGPT
(April 2023 version) and asked for the corresponding code. It was
wrong in many ways, like using non-existing functions with plausible
names (~org-escape-latex~), oscillating between a single- and a
multi-file package, and just not doing what it was supposed to do. It
would also insist that some things would work even when told that they
did not. It did have a good general grasp of many things, like
defining a minor mode and customize variables, and it was always
syntactically correct.
